//
//== Mixins (If you don't need attributes, consider placeholders instead).
//

@import './svg';

@mixin evil-ie {
  @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
    @content;
  }
}

@mixin text-replace($imageURL) {
  background: url($imageURL) no-repeat;
  text-indent: 200%;
  white-space: nowrap;
  overflow: hidden;
}

@mixin icon-background($icon, $color: #000) {
  background: url(svg-fill-replace($icon, $color)) no-repeat center center;
  background-size: contain;
}

@mixin icon-beside($icon, $color: #000, $side: left, $size: 10px) {
  position: relative;
  &::before {
    @include icon-background($icon, $color);
    #{$side}: 0;
    content: '';
    display: block;
    height: $size;
    margin: -($size/2) ($size/2);
    position: absolute;
    top: 50%;
    width: $size;
  }
}

@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
  @font-face {
    font-family: $font-family;
    src: url("#{$file-path}.eot");
    src: url("#{$file-path}.eot?#iefix") format('embedded-opentype'),
    url("#{$file-path}.woff") format('woff'),
    url("#{$file-path}.woff2") format('woff2'),
    url("#{$file-path}.ttf") format('truetype'),
    url("#{$file-path}.svg##{$font-family}") format('svg');
    font-weight: $font-weight;
    font-style: $font-style;
  }
  // Chrome for Windows rendering fix: https://www.adtrak.co.uk/blog/font-face-chrome-rendering/
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @font-face {
      font-family: $font-family;
      src: url("#{$file-path}.svg##{$font-family}") format('svg');
    }
  }
}

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xs {
      @media (max-width: $breakpoint-a) { @content; }
    }

    @else if $min == sm {
      @media (min-width: $breakpoint-b) { @content; }
    }

    @else if $min == md {
      @media (min-width: $breakpoint-c) { @content; }
    }

    @else if $min == lg {
      @media (min-width: $breakpoint-d) { @content; }
    }

    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; }
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; }
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; }
    @media #{$query} { @content; }
  }
}

@mixin font-size-map($fs-map) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include line-height-map($fs-font-size);
    }
    @else {
      @include breakpoint($fs-breakpoint) {
        @include line-height-map($fs-font-size);
      }
    }
  }
}

@mixin line-height-map($fs-font-size) {
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}
